<?xml version="1.0"?>
<doc>
    <assembly>
        <name>test</name>
    </assembly>
    <members>
        <member name="T:PriorityMap.PriorityMap`1">
            <summary>
            Represents a data structure that combines the characteristics of a priority queue and a key-value map.
            Elements are associated with priorities, allowing efficient retrieval, update, and removal based on priority.
            </summary>
            <typeparam name="T">The type of elements stored in the PriorityMap.</typeparam>
        </member>
        <member name="F:PriorityMap.PriorityMap`1._priorityMap">
            <summary>
            A sorted dictionary of data structures. The key represents the priority of the date structure. Higher number -> higher priority.
            </summary>
        </member>
        <member name="F:PriorityMap.PriorityMap`1._lock">
            <summary>
            A lock object used for synchronization to ensure thread safety in critical sections.
            </summary>
        </member>
        <member name="P:PriorityMap.PriorityMap`1.Count">
            <summary>
            Gets the total number of elements in the PriorityMap.
            </summary>
        </member>
        <member name="P:PriorityMap.PriorityMap`1.AllElements">
            <summary>
            Gets a read-only collection of all elements in the priority map.
            </summary>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.#ctor(System.Collections.Generic.IComparer{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:PriorityMap.PriorityMap`1"/> class.
            </summary>
            <param name="priorityComparer">
            An optional comparer to use when sorting priorities in the internal <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.
            If not specified (null), the default comparer for the key type <see cref="T:System.Int32"/> will be used.
            </param>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetElementAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the element at the specified index within the list associated with the given priority in the PriorityMap.
            </summary>
            <param name="priority">The priority of the list containing the desired element.</param>
            <param name="index">The index of the element within the specified priority list.</param>
            <returns>The element at the specified index within the priority list.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the PriorityMap is empty or if there is an issue retrieving the specified element.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified priority does not exist within the PriorityMap.
            </exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.Add(`0,System.Int32)">
            <summary>
            Adds an element with the specified priority to the PriorityMap.
            </summary>
            <param name="element">The element to add.</param>
            <param name="priority">The priority associated with the element (lower values indicate higher priority).</param>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.AddList(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Adds a list to the PriorityMap with the specified priority.
            If a list with the same priority already exists, returns false; otherwise, returns true.
            </summary>
            <param name="list">The list to add to the PriorityMap.</param>
            <param name="priority">The priority associated with the list.</param>
            <returns>True if the list is added successfully; otherwise, false.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.RemoveHighestPriority">
            <summary>
            Removes and returns the element with the highest priority from the PriorityMap.
            If multiple elements share the highest priority, the first one added will be removed.
            </summary>
            <returns>The element with the highest priority.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the PriorityMap is empty.</exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.IsEmpty">
            <summary>
            Checks if the priorityMap is empty
            </summary>
            <returns>True if map is empty, false if not</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.IsExist(`0)">
            <summary>
            Checks if the specified element exists in the PriorityMap.
            </summary>
            <param name="element">The element to check for existence.</param>
            <returns>True if the element exists in the PriorityMap; otherwise, false.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetPriority(`0)">
            <summary>
            Gets the priority of the specified element in the PriorityMap.
            </summary>
            <param name="element">The element to retrieve the priority for.</param>
            <returns>The priority of the element if found; otherwise, returns -1.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.UpdatePriority(`0,System.Int32)">
            <summary>
            Updates the priority of the specified element in the PriorityMap.
            </summary>
            <param name="element">The element whose priority needs to be updated.</param>
            <param name="newPriority">The new priority to assign to the element.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the specified element does not exist within the PriorityMap.
            </exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.TryPeekHighestPriority">
            <summary>
            Retrieves the element with the highest priority from the PriorityMap without removing it.
            </summary>
            <param name="result">An instance of PriorityMapResult&lt;T&gt; containing the element with the highest priority
            if the highest-priority list is not empty; otherwise, an invalid result.</param>
            <returns>True if the highest-priority list is not empty; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the PriorityMap is empty.</exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.RemoveHighestPriorityList">
            <summary>
            Removes and returns the list with the highest priority from the PriorityMap.
            </summary>
            <returns>
            The list with the highest priority if the PriorityMap is not empty;
            otherwise, throws an InvalidOperationException if the PriorityMap is empty
            or if there is an issue retrieving the highest priority list.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the PriorityMap is empty or if there is an issue retrieving the highest priority list.</exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.Reset">
            <summary>
            Resets the PriorityMap by creating a new instance.
            </summary>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.Clear">
            <summary>
            Clears the PriorityMap by resetting the original instance.
            </summary>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.ToArray">
            <summary>
            Converts all elements in the PriorityMap to a flat array.
            </summary>
            <returns>An array containing all elements in the PriorityMap.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.ToListArray">
            <summary>
            Converts the PriorityMap to an array of lists containing the elements.
            </summary>
            <returns>An array of lists containing the elements from the PriorityMap.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PriorityMap.PriorityMap`1.GetAllPriorities" -->
        <member name="M:PriorityMap.PriorityMap`1.ContainsDuplicates">
            <summary>
            Checks if the priority map contains any duplicate elements.
            </summary>
            <returns>True if there are duplicates; otherwise, false.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetUniqueElementCount">
            <summary>
            Retrieves the total count of unique elements in the priority map.
            </summary>
            <returns>The count of unique elements.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetElementsWithHighestPriority">
            <summary>
            Retrieves the elements with the highest priority.
            </summary>
            <returns>A list of elements with the highest priority.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.SplitByPredicate(System.Func{`0,System.Boolean})">
            <summary>
            Splits the priority map into two maps based on a predicate.
            </summary>
            <param name="predicate">The predicate to determine which priority map the element should belong to.</param>
            <returns>
            A tuple containing two PriorityMap instances:
            satisfying - PriorityMap with elements satisfying the predicate.
            notSatisfying - PriorityMap with elements not satisfying the predicate.
            </returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.ForEachElement(System.Action{`0})">
            <summary>
            Executes a specified action on each element in the priority map.
            </summary>
            <param name="action">The action to perform on each element.</param>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetPriorityCounts">
            <summary>
            Returns a dictionary with priorities as keys and the number of elements in each priority list.
            </summary>
            <returns>A dictionary with priorities and the corresponding count of elements.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.ReverseElementOrder">
            <summary>
            Reverses the order of elements within each priority list.
            </summary>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.HasElementsAtPriority(System.Int32)">
            <summary>
            Checks if the priority map contains elements at the specified priority.
            </summary>
            <param name="priority">The priority to check.</param>
            <returns>True if the priority map contains elements at the specified priority; otherwise, false.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.RemoveElement(`0)">
            <summary>
            Removes all occurrences of a specific element from the PriorityMap.
            </summary>
            <returns>True if operation is successful, otherwise false</returns>
            <param name="element">The element to be removed from all lists within the PriorityMap.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when PriorityMap is empty</exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.ClearPriority(System.Int32)">
            <summary>
            Clears the list with the specified priority from the PriorityMap.
            </summary>
            <param name="priority">The priority of the list to be cleared.</param>
            <returns>
              <c>true</c> if the list with the specified priority exists and is successfully cleared;
              otherwise, <c>false</c> if the list with the specified priority does not exist.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the PriorityMap is empty.</exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetElementsWithPriority(System.Int32)">
            <summary>
            Retrieves all elements with the specified priority from the PriorityMap.
            </summary>
            <param name="priority">The priority of the elements to retrieve.</param>
            <returns>An IEnumerable&lt;T&gt; containing all elements with the specified priority.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetAllElements">
            <summary>
            Retrieves all elements from the PriorityMap, combining them into a single sequence.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all elements in the PriorityMap.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.Serialize">
            <summary>
            Serializes the PriorityMap to a JSON string using the Newtonsoft.Json library.
            </summary>
            <returns>A JSON string representing the serialized PriorityMap.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.Deserialize(System.String)">
            <summary>
            Deserializes a JSON string into a PriorityMap using the Newtonsoft.Json library.
            </summary>
            <param name="json">The JSON string to deserialize into a PriorityMap.</param>
            <returns>A new instance of PriorityMap with data from the deserialized JSON string.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.MovePriority(System.Int32,System.Int32)">
            <summary>
            Moves all elements from one priority to another in the PriorityMap.
            </summary>
            <param name="sourcePriority">The source priority.</param>
            <param name="destinationPriority">The destination priority.</param>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.MergePriorities(System.Int32[],System.Int32)">
            <summary>
            Merges multiple priorities into a single priority in the PriorityMap.
            </summary>
            <param name="priorities">An array of priorities to merge.</param>
            <param name="destinationPriority">The priority to merge the elements into.</param>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.DoesPriorityExist(System.Int32)">
            <summary>
            Checks if a specified priority does not exist within the priority map.
            </summary>
            <param name="priority">The priority to check.</param>
            <returns>True if the priority does not exist; otherwise, false.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.RemoveElementAt(System.Int32,System.Int32)">
            <summary>
            Removes an element at the specified priority and index.
            </summary>
            <param name="priority">The priority of the element to remove.</param>
            <param name="index">The index of the element to remove within its priority list.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the priority map is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified priority does not exist within the priority map.</exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.AddOrUpdate(`0,System.Int32)">
            <summary>
            Adds or updates an element in the priority map with the specified priority.
            </summary>
            <param name="element">The element to add or update.</param>
            <param name="priority">The priority of the element.</param>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.AddOrUpdateList(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Adds or updates a collection of elements in the priority map with the specified priority.
            </summary>
            <param name="elements">The collection of elements to add or update.</param>
            <param name="priority">The priority of the elements.</param>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.TryGetPriorityList(System.Int32,System.Collections.Generic.List{`0}@)">
            <summary>
            Attempts to retrieve the list of elements for a specified priority in the priority map.
            </summary>
            <param name="priority">The priority of the elements to retrieve.</param>
            <param name="priorityList">When this method returns, contains the list of elements for the specified priority, if the priority exists; otherwise, null.</param>
            <returns>True if the priority exists; otherwise, false.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.TrimExcess">
            <summary>
            Trims excess capacity from the lists of elements in the priority map.
            </summary>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.HasElementsAtAllPriorities(System.Int32[])">
            <summary>
            Checks if the priority map contains elements at all specified priorities.
            </summary>
            <param name="priorities">The priorities to check.</param>
            <returns>True if the priority map contains elements at all specified priorities; otherwise, false.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetMinElementsCount">
            <summary>
            Returns the minimum count of elements among all priority lists.
            </summary>
            <returns>The minimum count of elements among all priority lists.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.GetMaxElementsCount">
            <summary>
            Returns the maximum count of elements among all priority lists.
            </summary>
            <returns>The maximum count of elements among all priority lists.</returns>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.MergeDataStructures(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{`0}},System.Collections.Generic.List{System.Int32})">
            <summary>
            Merges a data structure of data structures with values and a data structure of integers into a single PriorityMap.
            The integers represent the priorities (keys), and the data structure of data structures represents the lists (PriorityMap[key]).
            The lists will be sorted in a way that the first list ([0]) will be given the priority of the first integer.
            Lists without a corresponding value will be assigned a priority value of 0, giving them low priority.
            If the data structure of integers is larger than the other parameter, an exception will be thrown.
            </summary>
            <param name="dataStructures">A data structure of data structures with values to be merged into the PriorityMap.</param>
            <param name="priorities">A data structure of integers representing the priorities for the lists in the PriorityMap.</param>
            <returns>A new PriorityMap containing the merged data structures.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the data structure of integers is larger than the data structure of data structures.
            </exception>
        </member>
        <member name="M:PriorityMap.PriorityMap`1.MergePrioritiesWithCustomLogic(System.Int32[],System.Int32,System.Func{System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Collections.Generic.List{`0}})">
            <summary>
            Merges multiple priorities into a single priority in the PriorityMap using custom logic provided by the specified merge function.
            </summary>
            <param name="priorities">An array of priorities to merge.</param>
            <param name="destinationPriority">The priority to merge the elements into.</param>
            <param name="mergeFunction">A custom merge function that defines the logic for combining lists of elements.</param>
        </member>
    </members>
</doc>
